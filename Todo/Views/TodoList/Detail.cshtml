@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Models.TodoItems;
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">
    <ul class="list-group">
        <li class="list-group-item">
            @Html.DropDownListFor(
                m => m.SortOrder,
                new List<SelectListItem>
                {
                    new SelectListItem("Low Importance", TodoListSortOrder.LowImportance.ToString()),
                    new SelectListItem("High Importance", TodoListSortOrder.HighImportance.ToString()),
                    new SelectListItem("Lowest Rank", TodoListSortOrder.LowestRank.ToString()),
                    new SelectListItem("Highest Rank", TodoListSortOrder.HighestRank.ToString()),
                }
            )
        </li>

        @{
            IEnumerable<TodoItemSummaryViewmodel> items;
            if (!Model.ShouldShowDoneItems)
            {
                items = Model.Items.Where(i => !i.IsDone);
            }
            else
            {
                items = Model.Items;
            }

            switch (Model.SortOrder)
            {
                case TodoListSortOrder.LowImportance:
                    items = items.OrderByDescending(i => i.Importance);
                    break;
                case TodoListSortOrder.HighImportance:
                    items = items.OrderBy(i => i.Importance);
                    break;
                case TodoListSortOrder.LowestRank:
                    items = items.OrderBy(i => i.Rank);
                    break;
                case TodoListSortOrder.HighestRank:
                    items = items.OrderByDescending(i => i.Rank);
                    break;
            }
        }

        @foreach (var item in items)
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li class="list-group-item @contextualClass">
                
                <div class="row">

                <div class="col-md-8">
                    <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                        @if (item.IsDone)
                        {
                            <s>@item.Title</s>
                        }
                        else
                        {
                            <text>@item.Title</text>
                        }
                    </a>
                </div>

                <div class="col-md-4 text-right">
                    <small>
                        @item.ResponsibleParty.UserName

                        <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30"/>

                    </small>
                </div>
                </div>
            </li>
        }
    </ul>
    <a asp-action="Detail"
        asp-route-todoListId="@Model.TodoListId"
        asp-route-shouldShowDoneItems="@(!Model.ShouldShowDoneItems)"
       asp-route-sortOrder="@Model.SortOrder">
        @(Model.ShouldShowDoneItems ? "Do not show Done Items" : "Show Done Items")
    </a>
</div>

<div>
    @await Html.PartialAsync(
        "../TodoItem/Create.cshtml",
        new TodoItemCreateFields(Model.TodoListId, Model.Title, User.Id(), 0))
</div>

@section Scripts {
    <script type="text/javascript">
        const $sortDropdown = $('select#SortOrder');
        $sortDropdown.change(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const todoListId = urlParams.get('todoListId');
            const shouldShowDoneItems = urlParams.get('shouldShowDoneItems');
            const url = window.location.origin
                + window.location.pathname
                + "?todoListId=" + todoListId
                + "&shouldShowDoneItems=" + shouldShowDoneItems
                + "&sortOrder=" + $sortDropdown.val();
            window.location.href = url;
        });
    </script>
}
